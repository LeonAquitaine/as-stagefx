name: Release

on:
  push:
    branches:
      - main

# Add necessary permissions for creating releases
permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Check for version.txt
        id: check_version
        run: |
          if [ ! -f version.txt ]; then
            echo "version.txt not found!"
            exit 1
          fi

      - name: Get version
        id: get_version
        run: |
          VERSION=$(cat version.txt)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          
      - name: Process release template
        run: |
          # Create a temporary file with the version variable replaced
          mkdir -p /tmp/release
          cat docs/template/release.md | sed "s/\${VERSION}/${{ env.VERSION }}/g" > /tmp/release/release.md
          
      - name: Zip shaders folder
        run: |
          zip -r as-stagefx-${{ env.VERSION }}.zip shaders/

      - name: Create tag if it doesn't exist
        id: create_tag
        run: |
          git fetch --tags
          if git tag -l | grep -q "${{ env.VERSION }}"; then
            echo "Tag ${{ env.VERSION }} already exists."
          else
            git tag "${{ env.VERSION }}"
            git push origin "${{ env.VERSION }}"
          fi

      - name: Check for existing release
        id: check_release
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: process.env.VERSION
              });
              
              if (release && release.data) {
                console.log(`Existing release found with ID: ${release.data.id}`);
                // Delete the existing release
                await github.rest.repos.deleteRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.data.id
                });
                console.log('Existing release deleted');
                return 'deleted';
              }
              return 'not_found';
            } catch (error) {
              console.log('No existing release found:', error.message);
              return 'not_found';
            }

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          body_path: /tmp/release/release.md
          files: as-stagefx-${{ env.VERSION }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}