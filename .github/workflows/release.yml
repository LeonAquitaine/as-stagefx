name: Release

on:
  push:
    branches:
      - main

# Add necessary permissions for creating releases
permissions:
  contents: write

jobs:
  release:
    runs-on: windows-latest  # Changed to Windows for PowerShell

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Check for package-config.json
        id: check_version
        shell: pwsh
        run: |
          if (-not (Test-Path -Path "config/package-config.json")) {
            Write-Error "package-config.json not found!"
            exit 1
          }

      - name: Get version
        id: get_version
        shell: pwsh
        run: |
          $configJson = Get-Content -Path "config/package-config.json" -Raw | ConvertFrom-Json
          $version = $configJson.version
          echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Append
          
      - name: Process release template
        shell: pwsh
        run: |
          # Create a temporary directory for release notes
          New-Item -ItemType Directory -Path "temp/release" -Force
          (Get-Content -Path "docs/template/release.md") -replace '\${VERSION}', "${{ env.VERSION }}" | Set-Content -Path "temp/release/release.md"
          
      - name: Build packages
        shell: pwsh
        run: |
          # Run the package build script
          .\build-packages.ps1
          
      - name: Create tag if it doesn't exist
        id: create_tag
        shell: pwsh
        run: |
          git fetch --tags
          $tagExists = git tag -l | Select-String -Pattern "${{ env.VERSION }}"
          if ($tagExists) {
            Write-Output "Tag ${{ env.VERSION }} already exists."
          } else {
            git tag "${{ env.VERSION }}"
            git push origin "${{ env.VERSION }}"
          }

      - name: Check for existing release
        id: check_release
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: process.env.VERSION
              });
              
              if (release && release.data) {
                console.log(`Existing release found with ID: ${release.data.id}`);
                // Delete the existing release
                await github.rest.repos.deleteRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.data.id
                });
                console.log('Existing release deleted');
                return 'deleted';
              }
              return 'not_found';
            } catch (error) {
              console.log('No existing release found:', error.message);
              return 'not_found';
            }

      - name: Read package manifest and prepare release
        id: prepare_release
        shell: pwsh
        run: |
          # Read the package manifest
          $manifestPath = "packages/package-manifest.json"
          if (-not (Test-Path -Path $manifestPath)) {
            Write-Error "Package manifest not found at $manifestPath"
            exit 1
          }
            $manifest = Get-Content -Path $manifestPath -Raw | ConvertFrom-Json
          
          # Get all ZIP files in the packages directory
          $zipFiles = Get-ChildItem -Path "packages" -Filter "*.zip" | Select-Object -ExpandProperty FullName
          
          if ($zipFiles.Count -eq 0) {
            Write-Error "No ZIP files found in packages directory. Build may have failed."
            exit 1
          }
          
          Write-Output "Found $($zipFiles.Count) ZIP packages for release:"
          foreach ($zipFile in $zipFiles) {
            Write-Output "  - $zipFile"
          }
          
          # Create comma-separated list of ZIP files for the release
          $zipFilesStr = $zipFiles -join ","
          echo "ZIP_FILES=$zipFilesStr" | Out-File -FilePath $env:GITHUB_ENV -Append          # Add package information to release notes
          $releaseNotes = Get-Content -Path "temp/release/release.md" -Raw
          $packageInfo = "`n## Packages`n`n"
          $packageInfo += "This release includes the following packages:\n\n"
          
          foreach ($zipFile in $zipFiles) {
            $zipFileName = Split-Path $zipFile -Leaf
            $packageInfo += "* **[$zipFileName](https://github.com/${{ github.repository }}/releases/download/${{ env.VERSION }}/$zipFileName)**\n"
          }
          
          $packageInfo += "\n### Package Contents\n\n"
          
          foreach ($packageKey in $manifest.packages.PSObject.Properties.Name) {
            $package = $manifest.packages.$packageKey
            $packageName = $package.name
            $packageDesc = $package.description
            $fileCount = $package.fileCount
            
            # Check if package has textures
            $textureInfo = ""
            if ($package.PSObject.Properties.Name -contains "textures" -and $package.textures.fileCount -gt 0) {
              $textureInfo = " + $($package.textures.fileCount) textures"
            }
            
            $packageInfo += "### $packageName`n"
            $packageInfo += "$packageDesc`n"
            $packageInfo += "- **Contents**: $fileCount shader files$textureInfo`n`n"
          }
          
          $releaseNotes += $packageInfo
          $releaseNotes | Set-Content -Path "temp/release/release.md"

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          body_path: temp/release/release.md
          files: ${{ env.ZIP_FILES }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}